{"version":3,"sources":["DropdownItem.js","App.js","serviceWorker.js","index.js"],"names":["DropdownItem","props","Dropdown","Item","onClick","color","label","className","style","width","height","backgroundColor","App","state","array","finshed","sorting","right","left","iterator","count","delay","resetArray","bind","randomIntFromInterval","insertionSort","bubbleSort","shellSort","selectionSort","countingSort","cocktailSort","handleCountChange","handleSpeedChange","i","this","push","setState","finished","complexity","min","max","Math","floor","random","ms","Promise","resolve","setTimeout","n","length","current","j","sleep","x","swapp","temp","increment","parseInt","len","swapped","temp1","event","target","value","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","Button","disabled","drop","DropdownButton","title","class","colorSelect","Form","Group","controlId","Label","Control","type","step","onChange","Badge","transform","map","number","index","OverlayTrigger","placement","overlay","Tooltip","key","fixed","cursor","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04db91a2.chunk.js","sourcesContent":["import React from 'react'\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nexport default function DropdownItem(props) {\n    return <Dropdown.Item  onClick={() => props.onClick(props.color)}>{props.label}<div className=\"color\" style={{width: '15px', height: '15px', backgroundColor: props.color}}></div></Dropdown.Item>\n}\n\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\nimport Badge from 'react-bootstrap/Badge';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport DropdownItem from './DropdownItem.js';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      array: [],\n      finshed: false,\n      sorting: false,\n      right: false,\n      left: true,\n      color: '#343a40',\n      iterator: null,\n      count: 50,\n      delay: 0\n    }    \n    this.resetArray = this.resetArray.bind(this)\n    this.randomIntFromInterval = this.randomIntFromInterval.bind(this)\n    this.insertionSort = this.insertionSort.bind(this)\n    this.bubbleSort = this.bubbleSort.bind(this)\n    this.shellSort = this.shellSort.bind(this)\n    this.selectionSort = this.selectionSort.bind(this)\n    this.countingSort = this.countingSort.bind(this)\n    this.cocktailSort = this.cocktailSort.bind(this)\n    this.handleCountChange = this.handleCountChange.bind(this)\n    this.handleSpeedChange = this.handleSpeedChange.bind(this)\n  }\n\n  resetArray() {\n    let array = []\n    for(let i = 0; i < this.state.count; i++) {\n      array.push(this.randomIntFromInterval(10, 490))\n    }\n    this.setState({ array, finished: false, complexity: '' })\n  }\n\n  componentDidMount() {\n    this.resetArray()\n  }\n\n  randomIntFromInterval(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async insertionSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let n = array.length;\n    for (let i = 1; i < n; i++) {\n      let current = array[i];\n      let j = i - 1; \n      while ((j > -1) && (current < array[j])) {\n          this.setState({iterator: j})\n          await this.sleep(this.state.delay)\n          this.setState({array})\n          array[j + 1] = array[j];\n          j--;\n      }\n      array[j+1] = current;\n    }\n    return this.setState({ array, finished: true, sorting: false })\n  }\n\n  async bubbleSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let swapp;\n    let n = array.length-1;\n    let x = array;\n    do {\n      swapp = false;\n      for (var i=0; i < n; i++) {\n        this.setState({iterator: i})\n        if (x[i] > x[i+1]) {\n          let temp = x[i];\n          x[i] = x[i + 1];\n          x[i + 1] = temp;\n          swapp = true;\n          await this.sleep(this.state.delay)\n          this.setState({array})\n        }\n      }\n      n--;\n  } while(swapp);\n  return this.setState({ array, finished: true, sorting: false})\n}\n\n  async shellSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let increment = array.length / 2;\n    while (increment > 0) {\n      for (let i = increment; i < array.length; i++) {\n          let j = i;\n          let temp = array[i];\n          await this.sleep(this.state.delay)\n          this.setState({array})\n          this.setState({iterator: i})\n          while (j >= increment && array[j - increment] > temp) {\n            this.setState({iterator: j})\n            array[j] = array[j-increment];\n            j = j - increment;\n          }\n        array[j] = temp;\n        await this.sleep(this.state.delay)\n        this.setState({array})\n        this.setState({iterator: j})\n      }\n      if (increment === 2) {\n          increment = 1;\n\n      } else {\n          increment = parseInt(increment * 5 / 11);\n      }\n    }\n    return this.setState({ array, finished: true, sorting: false })\n  }\n\n  async selectionSort(){\n    this.setState({sorting: true})\n    let array = this.state.array\n    for(var i = 0; i < array.length; i++){\n      //set min to the current iteration of i\n      var min = i;\n      for(var j = i+1; j < array.length; j++){\n        if(array[j] < array[min]){\n         min = j;\n         await this.sleep(this.state.delay)\n         this.setState({array})\n         this.setState({iterator: j})\n        }\n      }\n      var temp = array[i];\n      array[i] = array[min];\n      array[min] = temp;\n    }\n    return this.setState({ array, finished: true, sorting: false })\n  };\n\n  async countingSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let i = 30,\n        j = 0,\n        len = array.length,\n        count = [];\n    for (i; i <= 490; i++) {\n        count[i] = 0;\n    }\n    for (i = 0; i < len; i++) {\n        count[array[i]] += 1;\n    }\n    for (i = 30; i <= 490; i++) {\n        while (count[i] > 0) {\n            array[j] = i;\n            j++;\n            count[i]--;\n            this.setState({iterator: j})\n            await this.sleep(this.state.delay)\n            this.setState({array})\n        }\n    }\n    return this.setState({array, finished: true, sorting: false});\n  };\n\n  async cocktailSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let swapped;\n    do {\n      for(let i = 0; i < array.length - 2; i++) {\n        if(array[i] > array[i + 1]) {\n          let temp = array[i];\n          array[i] = array[i + 1];\n          array[i + 1] = temp;\n          swapped = true;\n          this.setState({iterator: i + 1})\n          await this.sleep(this.state.delay)\n          this.setState({array})\n        }\n      }\t\n      if(!swapped) {\n        break;\n      }\n      swapped = false;\n      for(let i = array.length - 2; i > 0; i--) {\n        if(array[i] > array[i+1]) {\n          let temp1 = array[i];\n          array[i] = array[i+1];\n          array[i+1] = temp1;\n          swapped = true;\n          this.setState({iterator: i})\n          await this.sleep(this.state.delay)\n          this.setState({array})\n        }\n      }\n    } while(swapped);\n    return this.setState({array, finished: true, sorting: false});\n  }\n\n  colorSelect(color) {\n    this.setState({ color })\n  }\n\n  handleCountChange(event) {\n    this.setState({count: event.target.value});\n    this.resetArray()\n  }\n\n  handleSpeedChange(event) {\n    this.setState({delay: event.target.value});\n  }\n\n  render() {\n    return (\n      <>\n      <Navbar className=\"nav\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Sorting Algorithm Visualizer</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\"></Nav>\n            <div className=\"buttons\">\n              <Button variant=\"primary\" bg=\"dark\" disabled={this.state.sorting} onClick={this.resetArray}><i className=\"fa fa-sync-alt\"></i></Button>\n              <Dropdown drop=\"down\">\n                <DropdownButton variant=\"dark\" drop=\"down\" className=\"colorBox\" disabled={this.state.sorting || this.state.finished} id=\"dropdown-basic-button\" title=\"Algorithms\">\n                  <Dropdown.Item variant=\"light\" disabled={this.state.sorting || this.state.finished} onClick={this.insertionSort}>Insertion Sort</Dropdown.Item>\n                  <Dropdown.Item variant=\"light\" disabled={this.state.sorting || this.state.finished} onClick={this.bubbleSort}>Bubble Sort</Dropdown.Item>\n                  <Dropdown.Item variant=\"light\" disabled={this.state.sorting || this.state.finished} onClick={this.shellSort}>Shell Sort</Dropdown.Item>\n                  <Dropdown.Item variant=\"light\" disabled={this.state.sorting || this.state.finished} onClick={this.selectionSort}>Selection Sort</Dropdown.Item>\n                  <Dropdown.Item variant=\"light\" disabled={this.state.sorting || this.state.finished} onClick={this.countingSort}>Counting Sort</Dropdown.Item>\n                  <Dropdown.Item variant=\"light\" disabled={this.state.sorting || this.state.finished} onClick={this.cocktailSort}>Cocktail Sort</Dropdown.Item>\n                </DropdownButton>\n              </Dropdown>\n              <DropdownButton variant=\"dark\" drop=\"down\" className=\"colorBox\" disabled={this.state.sorting || this.state.finished} id=\"dropdown-basic-button\" title={<i class=\"fas fa-sliders-h\"></i>}>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Grey\" color=\"#343a40\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Blue\" color=\"#007BFF\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Green\" color=\"#1ed485\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Pink\" color=\"#ff3d94\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Purple\" color=\"#dd00ff\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Yellow\" color=\"#fcba03\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Black\" color=\"#000000\"></DropdownItem>\n              </DropdownButton>\n              <Form className=\"slider\">\n                <Form.Group className=\"slider\" controlId=\"formBasicRange\">\n                  <Form.Label className=\"countLabel\">Array Size</Form.Label>\n                  <Form.Control\n                  type=\"range\" \n                  min=\"20\" max=\"100\" \n                  step=\"1\"\n                  value={this.state.count} \n                  onChange={this.handleCountChange}\n                  disabled={this.state.sorting || this.state.finished} />\n                </Form.Group>\n              </Form>\n              <div className=\"badge\"><Badge variant=\"light\">{this.state.count}</Badge></div>\n              <Form className=\"slider\">\n                <Form.Group className=\"slider\" controlId=\"formBasicRange\">\n                  <Form.Label className=\"countLabel\">Delay</Form.Label>\n                  <Form.Control\n                  type=\"range\" \n                  min=\"0\" max=\"100\" \n                  step=\"1\"\n                  value={this.state.delay} \n                  onChange={this.handleSpeedChange} />\n                </Form.Group>\n              </Form>\n              <div className=\"badge\"><Badge variant=\"light\">{this.state.delay}ms</Badge></div>\n            </div>\n        </Navbar.Collapse>\n      </Navbar>\n        <div className=\"App\">\n          <div className=\"numbers\" style={{transform: this.state.left ? 'rotateX(180deg)' : 'rotateY(180deg) rotateX(180deg)'}}>\n            {this.state.array.map((number, index) => {\n              return(\n                <>\n                  <OverlayTrigger \n                  placement=\"top\" \n                  overlay={\n                    <Tooltip>\n                      Value: <strong>{number}</strong>\n                    </Tooltip>}>\n                  <div className=\"number\" key={index} style={{width: '15px', height: number,  \n                   backgroundColor: this.state.iterator === index && this.state.sorting ? 'red' : this.state.color}}></div>\n                  </OverlayTrigger>\n                </>\n              )\n              \n            })}\n          </div>\n          <Navbar fixed=\"bottom\" className=\"footer\" bg=\"dark\" variant=\"dark\">\n            <p>Ryan Jacobson © 2020 </p>\n            <i style={{cursor: 'pointer'}} href=\"https://github.com/jacobsonryan/sorting-visualizer\" className=\"fab fa-github\"></i>\n          </Navbar>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}