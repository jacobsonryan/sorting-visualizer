{"version":3,"sources":["DropdownItem.js","App.js","serviceWorker.js","index.js"],"names":["DropdownItem","props","Dropdown","Item","onClick","color","label","className","style","width","height","backgroundColor","App","state","array","finshed","sorting","right","left","iterator","value","resetArray","bind","randomIntFromInterval","insertionSort","bubbleSort","shellSort","selectionSort","handleChange","i","this","push","setState","finished","complexity","min","max","Math","floor","random","ms","Promise","resolve","setTimeout","n","length","current","j","sleep","x","swapp","temp","increment","parseInt","event","target","console","log","Navbar","collapseOnSelect","expand","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","Button","disabled","Form","Group","controlId","Label","Control","type","Badge","DropdownButton","drop","title","class","colorSelect","transform","map","number","index","OverlayTrigger","placement","overlay","Tooltip","key","fixed","cursor","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.05959504.chunk.js","sourcesContent":["import React from 'react'\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nexport default function DropdownItem(props) {\n    return <Dropdown.Item  onClick={() => props.onClick(props.color)}>{props.label}<div className=\"color\" style={{width: '15px', height: '15px', backgroundColor: props.color}}></div></Dropdown.Item>\n}\n\n","import React, { useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\nimport Badge from 'react-bootstrap/Badge';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport DropdownItem from './DropdownItem.js';\nimport './App.css';\n\nconst ARRAY_COUNT = 35\nconst DELAY = 1\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      array: [],\n      finshed: false,\n      sorting: false,\n      right: false,\n      left: true,\n      color: '#343a40',\n      iterator: null,\n      value: 20\n    }    \n    this.resetArray = this.resetArray.bind(this)\n    this.randomIntFromInterval = this.randomIntFromInterval.bind(this)\n    this.insertionSort = this.insertionSort.bind(this)\n    this.bubbleSort = this.bubbleSort.bind(this)\n    this.shellSort = this.shellSort.bind(this)\n    this.selectionSort = this.selectionSort.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  resetArray() {\n    let array = []\n    for(let i = 0; i < this.state.value; i++) {\n      array.push(this.randomIntFromInterval(50, 500))\n    }\n    this.setState({ array, finished: false, complexity: '' })\n  }\n\n  componentDidMount() {\n    this.resetArray()\n  }\n\n  randomIntFromInterval(min, max) {\n      return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async insertionSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let n = array.length;\n    for (let i = 1; i < n; i++) {\n      let current = array[i];\n      let j = i-1; \n      while ((j > -1) && (current < array[j])) {\n          this.setState({iterator: j})\n          await this.sleep(DELAY)\n          this.setState({array})\n          array[j+1] = array[j];\n          j--;\n      }\n      array[j+1] = current;\n    }\n    return this.setState({ array, finished: true, sorting: false })\n  }\n\n  async bubbleSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let swapp;\n    let n = array.length-1;\n    let x = array;\n    do {\n      swapp = false;\n      for (var i=0; i < n; i++) {\n        this.setState({iterator: i})\n        if (x[i] > x[i+1]) {\n          let temp = x[i];\n          x[i] = x[i + 1];\n          x[i + 1] = temp;\n          swapp = true;\n          await this.sleep(DELAY)\n          this.setState({array})\n        }\n      }\n      n--;\n  } while(swapp);\n  return this.setState({ array, finished: true, sorting: false})\n}\n\n  async shellSort() {\n    this.setState({sorting: true})\n    let array = this.state.array\n    let increment = array.length / 2;\n    while (increment > 0) {\n      for (let i = increment; i < array.length; i++) {\n          let j = i;\n          let temp = array[i];\n          await this.sleep(DELAY)\n          this.setState({array})\n          this.setState({iterator: i})\n          while (j >= increment && array[j-increment] > temp) {\n            this.setState({iterator: j})\n            array[j] = array[j-increment];\n            j = j - increment;\n          }\n        array[j] = temp;\n        await this.sleep(DELAY)\n        this.setState({array})\n      }\n      if (increment === 2) {\n          increment = 1;\n\n      } else {\n          increment = parseInt(increment * 5 / 11);\n      }\n    }\n    return this.setState({ array, finished: true, sorting: false })\n  }\n\n  async selectionSort(){\n    this.setState({sorting: true})\n    let array = this.state.array\n    for(var i = 0; i < array.length; i++){\n      //set min to the current iteration of i\n      var min = i;\n      for(var j = i+1; j < array.length; j++){\n        if(array[j] < array[min]){\n         min = j;\n         await this.sleep(DELAY)\n         this.setState({array})\n         this.setState({iterator: j})\n        }\n      }\n      var temp = array[i];\n      array[i] = array[min];\n      array[min] = temp;\n    }\n    return this.setState({ array, finished: true, sorting: false })\n  };\n\n  colorSelect(color) {\n    this.setState({ color })\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n    console.log(this.state.value)\n    this.resetArray()\n  }\n\n  render() {\n    return (\n      <>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>Sorting Algorithm Visualizer</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\"></Nav>\n            <div className=\"buttons\">\n              <Button variant=\"dark\" disabled={this.state.sorting} onClick={this.resetArray}><i className=\"fa fa-sync-alt\"></i></Button>\n              <Form className=\"slider\">\n                <Form.Group className=\"slider\" controlId=\"formBasicRange\">\n                  <Form.Label></Form.Label>\n                  <Form.Control type=\"range\"\n                  type=\"range\" \n                  min=\"20\" max=\"50\" \n                  step=\"1\"\n                  value={this.state.value} \n                  onChange={this.handleChange}\n                  disabled={this.state.sorting || this.state.finished} />\n                </Form.Group>\n              </Form>\n              <div className=\"badge\"><Badge variant=\"light\">{this.state.value}</Badge></div>\n              <Button variant=\"dark\" disabled={this.state.sorting || this.state.finished} onClick={this.insertionSort}>Insertion Sort</Button>\n              <Button variant=\"dark\" disabled={this.state.sorting || this.state.finished} onClick={this.bubbleSort}>Bubble Sort</Button>\n              <Button variant=\"dark\" disabled={this.state.sorting || this.state.finished} onClick={this.shellSort}>Shell Sort</Button>\n              <Button variant=\"dark\" disabled={this.state.sorting || this.state.finished} onClick={this.selectionSort}>Selection Sort</Button>\n              <DropdownButton variant=\"dark\" drop=\"left\" className=\"colorBox\" disabled={this.state.sorting || this.state.finished} id=\"dropdown-basic-button\" title={<i class=\"fas fa-sliders-h\"></i>}>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Grey\" color=\"#343a40\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Blue\" color=\"#007BFF\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Green\" color=\"#1ed485\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Pink\" color=\"#ff3d94\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Purple\" color=\"#dd00ff\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Yellow\" color=\"#fcba03\"></DropdownItem>\n                <DropdownItem onClick={this.colorSelect.bind(this)} label=\"Black\" color=\"#000000\"></DropdownItem>\n              </DropdownButton>\n            </div>\n        </Navbar.Collapse>\n      </Navbar>\n        <div className=\"App\">\n          <div className=\"numbers\" style={{transform: this.state.left ? 'rotateX(180deg)' : 'rotateY(180deg) rotateX(180deg)'}}>\n            {this.state.array.map((number, index) => {\n              return(\n                <>\n                  <OverlayTrigger \n                  placement=\"top\" \n                  overlay={\n                    <Tooltip>\n                      Value: <strong>{number}</strong>\n                    </Tooltip>}>\n                  <div className=\"number\" key={index} style={{width: '15px', height: number,  \n                   backgroundColor: this.state.iterator === index && this.state.sorting ? 'red' : this.state.color}}></div>\n                  </OverlayTrigger>\n                </>\n              )\n              \n            })}\n          </div>\n          <Navbar fixed=\"bottom\" className=\"footer\" bg=\"dark\" variant=\"dark\">\n            <p>Ryan Jacobson © 2020 </p>\n            <i style={{cursor: 'pointer'}} href=\"https://github.com/jacobsonryan/sorting-visualizer\" className=\"fab fa-github\"></i>\n          </Navbar>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}